#include bitsstdc++.h

using namespace std;

vectorstring split_string(string);

 Complete the arrayManipulation function below.
long arrayManipulation(int n, vectorvectorint queries) {

    vectorlongarr(n);
    long numOperations = 0;
    for(int i = 0; i  queries.size(); i++)
        numOperations += (queries[i].size()3);
    cout  numOperations   numOperations endl;

    for(int row = 0; row  numOperations; row++)
    {
        for(long i = (queries[row][0] - 1); i = (queries[row][1] - 1); i++)
        {
            
            arr[i] += queries[row][2];
        }
    }


    long max = -999;
    for(int i = 0; i  n; i++)
    {
        if(arr[i]max)
        {
            max = arr[i];
        }
    }

    return max;




}

int main()
{
    ofstream fout(getenv(OUTPUT_PATH));

    string nm_temp;
    getline(cin, nm_temp);

    vectorstring nm = split_string(nm_temp);

    int n = stoi(nm[0]);

    int m = stoi(nm[1]);

    vectorvectorint queries(m);
    for (int i = 0; i  m; i++) {
        queries[i].resize(3);

        for (int j = 0; j  3; j++) {
            cin  queries[i][j];
        }

        cin.ignore(numeric_limitsstreamsizemax(), 'n');
    }

    long result = arrayManipulation(n, queries);

    fout  result  n;

    fout.close();

    return 0;
}

vectorstring split_string(string input_string) {
    stringiterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vectorstring splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != stringnpos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}
s