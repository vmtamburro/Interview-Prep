Heaps

Min Heaps, or Max Heaps. In a min heap, the root is smaller than its children. How to create and maintain a data structure like this. When instering an element, it always goes top to bottom, and left to right. Can insert the element there, and bubble it up until it is in the corrected spot. Removing the minimum element. Will always be the node. Swap the value at the root with the last element added. Take the root element, and bubble it down to the next spot. Could do a simple class HeapNode with a left node or a right node. However, since there are no gaps in the heap, we can use an array to store these values. 

//*******************

public class MinIntHeap 
{
	private int capcaity = 10;
	private int size = 0;
	
	int[] items = new int[capacity];
	
	private int getLeftChildIndex(int parentIndex) { return 2 * parentIndex + 1; }
	private int getRightChildIndex(int parentIndex {return 2 * parentIndex + 2; }
	private int getParentIndex(int childIndex) { return (childIndex - 1) /2; }

	private boolean hasLeftChild(int index) { return getLeftChildIndex(index) < size; }
	private boolean hasRightChild(int index) { return GetRightChildIndex(index)<size; }
	private boolean hasParent (int index) { return getParentIndex(index) >= 0; }
	
	private int leftChild(int index) { return items[getLeftChildIndex(index)]; }
	private int rightChild(int index) {return items[getRightChildIndex(index)]; }
	private int parent(int index) {return items]getParentIndex(index)]; }

	private void swap(int indexOne, int indexTwo) 
	{
		int temp = items[indexOne];
		items[indexOne] = items [indexTwo];
		items[indexTwo] = temp;
	}

	private void ensureExtraCapacity()
	{
		if(size==capacity)
		{
			items = Arrays.copyOf(items, capacity * 2);
			capacity *= 2;
		}
	}

	public int peek()
	{
		if(size == 0) throw ne IllegalStateException();
		int item = items[0];
		items[0] = items[size - 1];
		size--;
		heapifyDown();

		return item;
	}

	public void heapifyUp()
	{
		int index = size-1;
		while(hasPArent(index && parent(index) > items[index]) 
		{
			swap(getParentIndex(index), index);
			index = getParentIndex[index];
		}
	}

	public void heapifyDown()
	{
		int index = 0;
		while(hasLeftChild(index))
		{
			if(hasRightChild(index) && rightChild(index) < leftChild(index)) 
			{
				smallerChildIndex = getRightChildIndex(index);
			}
			if(items[index] < items[smallerChildIndex]) 
				break;
			else
				swap(index, smallerChildIndex);
			index = smallerChildIndex;
		}
	}

	public void add(int item)
	{
		ensureExtraCapcity();
		items[size] = item;
		size++
		heapifyUp();
	}

	
}